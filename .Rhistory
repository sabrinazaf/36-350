}
print(fun(10))
print(fun(20))
print(fun(40))
sd(fun(10))
sd(fun(20))
sd(fun(40))
func = function(n){
x = runif(n, 0, 5)
y = 15 + 2*sin(2*pi*x/1.5)
return(mean(y))
}
ten = rep(NA, 1000)
for (i in 1:1000){
ten[i] = func(10)
}
sd(ten)
twenty = rep(NA, 1000)
for (i in 1:1000){
twenty[i] = func(20)
}
sd(twenty)
forty = rep(NA, 1000)
for (i in 1:1000){
forty[i] = fnc(40)
}
func = function(n){
x = runif(n, 0, 5)
y = 15 + 2*sin(2*pi*x/1.5)
return(mean(y))
}
ten = rep(NA, 1000)
for (i in 1:1000){
ten[i] = func(10)
}
sd(ten)
twenty = rep(NA, 1000)
for (i in 1:1000){
twenty[i] = func(20)
}
sd(twenty)
forty = rep(NA, 1000)
for (i in 1:1000){
forty[i] = func(40)
}
sd(forty)
loan.table = table(as.Date(loan.dates, format = "%m/%d/%y"))
loan.ts = ts(loan.table, start = c(2019, 91),frequency = 365)
ggplot(data = data.frame(loan.ts), mapping = aes(x = 1:length(loan.ts), y = loan.ts)) +
geom_point(color = 'blue') + xlab('Day') + ylab('# of Loans') +
ggtitle("CMU Library Loans, April 2019")
func = function(n){
x = runif(n, 0, 5)
y = 15 + 2*sin(2*pi*x/1.5)+rnorm(n,mean=0,sd=(0.2)^2)
return(mean(y))
}
ten = rep(NA, 1000)
for (i in 1:1000){
ten[i] = func(10)
}
sd(ten)
twenty = rep(NA, 1000)
for (i in 1:1000){
twenty[i] = func(20)
}
sd(twenty)
forty = rep(NA, 1000)
for (i in 1:1000){
forty[i] = func(40)
}
sd(forty)
func = function(n){
x = runif(n, 0, 5)
y = 15 + 2*sin(2*pi*x/1.5)+rnorm(n,mean=0,sd=(0.2)^2)
return(mean(y))
}
ten = rep(NA, 1000)
for (i in 1:1000){
ten[i] = func(10)
}
sd(ten)
twenty = rep(NA, 1000)
for (i in 1:1000){
twenty[i] = func(20)
}
sd(twenty)
forty = rep(NA, 1000)
for (i in 1:1000){
forty[i] = func(40)
}
sd(forty)
x=seq(stats::rnorm(100)
x=seq(stats::rnorm(100))
x=seq(stats::rnorm(100))
print(x)
x=seq(stats::pnorm(100))
x=seq(stats::pnorm(100))
print(x)
x=seq(stats::dnorm(100))
print(x)
x=seq(stats::rnorm(100))
print(x)
for (i in 10000){
x=seq(0,100,by=rnorm)
}
for (i in 10000){
x=seq(0,100,by=rnorm(100,0,1))
}
for (i in 10000){
x=seq(stats::rnorm(100))
acf(x)
}
x=rep(NA,10000)
for (i in 10000){
x[i]=seq(stats::rnorm(100))
}
x=rep(NA,10000)
for (i in 10000){
x[i]=seq(stats::rnorm(100))
i=i+1
}
x=rep(NA,10000)
for (i in 1:10000){
x[i]=seq(stats::rnorm(100))
}
x=rep(NA,10000)
for (i in 1:10000){
x[i]=acf(rnorm(100),plot=FALSE)
}
a = acf(maine.ts)
suppressMessages(library(tidyverse))
set.seed(101)
dat = read.table(url("http://www.stat.cmu.edu/~pfreeman/Maine.dat"),header=TRUE)
head(dat,3)
maine.ts = ts(dat,start=c(1996,1),frequency=12)
print(maine.ts)
plot(maine.ts)
maine.ts.annual = aggregate(maine.ts)/12  # average annual unemployment
plot(maine.ts.annual)
maine.ts.6month = aggregate(maine.ts,nfrequency=2)/6
plot(maine.ts.6month)
window(maine.ts,start=c(1996,3),freq=TRUE) # compare output with full print-out above
plot(decompose(maine.ts))
a = acf(maine.ts)
names(a)
plot(a)
a = acf(maine.ts)
names(a)
values(a)
x=rep(NA,10000)
for (i in 1:10000){
x[i]=lag(acf(rnorm(100),plot=FALSE))
}
print(acf(x,plot=FALSE))
x=rep(NA,10000)
for (i in 1:10000){
x[i]=(rnorm(100),plot=FALSE)
x=rep(NA,10000)
for (i in 1:10000){
x[i]=(rnorm(100))
#print(acf(x,plot=FALSE))
x=rep(NA,10000)
for (i in 1:10000){
x[i]=(rnorm(100))
#print(acf(x,plot=FALSE))
x=rep(NA,10000)
for (i in 1:10000){
x[i]=(rnorm(100))
}
#print(acf(x,plot=FALSE))
spectrum(wave,log=c("no"))
spectrum(loan.ts,log=c("no"))
spectrum(loan.ts,log=c("no"))
max(spectrum(loan.ts,log=c("no")))
spectrum(loan.ts,log=c("no"))
spectrum(loan.ts,log=c("no"))$max
spectrum(loan.ts,log=c("no"))
max(loan.ts)
spectrum(loan.ts,log=c("no"))
max(loan.ts)/50
spect = spectrum(loan.ts, log="no")
max.spect = p$freq[which(p$spec == max(p$spec))]
max.freq = max(p$freq)
max.freq/max.spect
spect = spectrum(loan.ts, log="no")
max.spect = p$freq[which(spect$spec == max(spect$spec))]
max.freq = max(spect$freq)
max.freq/max.spect
spect = spectrum(loan.ts, log="no")
max.spect = p$freq[which(spect$spec == max(spect$spec))]
max.freq = max(spect$freq)
max.freq/max.spect
spect = spectrum(loan.ts, log="no")
max.spect = spect$freq[which(spect$spec == max(spect$spec))]
max.freq = max(spect$freq)
max.freq/max.spect
sunspots = read.csv("http://www.stat.cmu.edu/~pfreeman/SN_m_tot_V2.0.csv",
sep = ";", header = FALSE)
sunspots.ts = ts(sun[,4], start = c(1749, 1), frequency = 12)
sunspots = read.csv("http://www.stat.cmu.edu/~pfreeman/SN_m_tot_V2.0.csv",
sep = ";", header = FALSE)
sunspots.ts = ts(sunspots[,4], start = c(1749, 1), frequency = 12)
plot(sunspots.ts, xlab = "Year", ylab = "Number of Sunspots")
sp= spectrum(sunspots.ts,log=c("no"), xlim = c(0, 0.4))
which.max(sp$freq)
1/which.max(sp$freq)
trials = 10000
obs = 100
k = rep(NA, trials)
for (ii in 1:trials) {
k[ii] = acf(rnorm(obs), log.max = 1, plot = FALSE)$acf[2]
}
hist(k)
ll = -(1/obs) - (2/sqrt(obs))
ul = -(1/obs) + (2/sqrt(obs))
length(k[which(k < ll | k > ul)])/length(k)
trials = 10000
obs = 100
k = rep(NA, trials)
for (ii in 1:trials) {
tmp = spectrum(rnorm(obs), plot = FALSE)
k[ii] = tmp$freq[which(tmp$spec == max(tmp$spec))]
}
hist(k, breaks = seq(.005, .505, .01))
u = runif(trials, .01, .50)
test(u, k)
trials = 10000
obs = 100
k = rep(NA, trials)
for (ii in 1:trials) {
tmp = spectrum(rnorm(obs), plot = FALSE)
k[ii] = tmp$freq[which(tmp$spec == max(tmp$spec))]
}
hist(k, breaks = seq(.005, .505, .01))
u = runif(trials, .01, .50)
t.test(u, k)
k1 = k[which(k > .015 & wn < .495)]
trials = 10000
obs = 100
k = rep(NA, trials)
for (ii in 1:trials) {
tmp = spectrum(rnorm(obs), plot = FALSE)
k[ii] = tmp$freq[which(tmp$spec == max(tmp$spec))]
}
hist(k, breaks = seq(.005, .505, .01))
u = runif(trials, .01, .50)
t.test(u, k)
k1 = k[which(k > .015 & k < .495)]
u1 = runif(length(k.1), .01, .50)
trials = 10000
obs = 100
k = rep(NA, trials)
for (ii in 1:trials) {
tmp = spectrum(rnorm(obs), plot = FALSE)
k[ii] = tmp$freq[which(tmp$spec == max(tmp$spec))]
}
hist(k, breaks = seq(.005, .505, .01))
u = runif(trials, .01, .50)
t.test(u, k)
k1 = k[which(k > .015 & k < .495)]
u1 = runif(length(k1), .01, .50)
t.test(u1, k1)
install.packages("stopwords")
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
setwd("~/Downloads")
circ=read.csv('20200225_print-circulation_sample.csv')
circ=data.framw(circ)
circ=read.csv('20200225_print-circulation_sample.csv')
circ=data.frame(circ)
head(circ)
summary(circ)
circ=circ[]
summary(circ)
circ=circ[,2:14]
circ
summary(circ)
circ=circ[,2:14]
summary(circ)
circ=circ[,2:13]
summary(circ)
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y, %H:%M:%S')))
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y, %H:%M:%S'))
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y, %H:%M:%S'))]
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y, %H:%M:%S'))
end=length(loan)
loan[loan[end]-loan[1]
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y, %H:%M:%S'))
end=length(loan)
loan[loan[end]-loan[1]]
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y, %H:%M:%S'))
end=length(loan)
loan[end]-loan[1]]
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y, %H:%M:%S'))
end=length(loan)
loan[end]-loan[1]
summary(circ)
loan
loan
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y %H:%M:%S'))
end=length(loan)
loan[end]-loan[1]
loan=loan[loan!='']
filter(circ$Loan.Date,'')
class(circ)
circ[circ$Loan.Date==""]<-NA
hist, breaks=10,xlab='Loan Duration (Days)', main=NULL)
circ[circ$Loan.Date==""]<-NA
#hist, breaks=10,xlab='Loan Duration (Days)', main=NULL)
circ$Loan.Date
tail(circ)
tail(circ$Loan.Date)
circ[circ$Loan.Date==""]<-NA
na.omit(circ
#hist, breaks=10,xlab='Loan Duration (Days)', main=NULL)
circ[circ$Loan.Date==""]<-NA
na.omit(circ)
#hist, breaks=10,xlab='Loan Duration (Days)', main=NULL)
loan
return=sort(as.POSIXlt(paste(circ$Return.Date), format='%m/%d/%y))
circ[circ$Loan.Date==""]<-NA
na.omit(circ)
#hist, breaks=10,xlab='Loan Duration (Days)', main=NULL)
return=sort(as.POSIXlt(paste(circ$Return.Date), format='%m/%d/%y'))
circ[circ$Loan.Date==""]<-NA
na.omit(circ)
return
filter(circ$Loan.Date, '1990')
circ %>% group_by(Return.Date) %>% filter('')
filter(circ$Return.Date, '')
filter(circ, circ$Return.Date='')
filter(circ, circ$Return.Date=='')
return=sort(as.POSIXlt(paste(circ$Return.Date), format='%m/%d/%y'))
filter
circ[circ$Loan.Date==""]<-NA
na.omit(circ)
filter(circ, circ$Return.Date!='')
return=sort(as.POSIXlt(paste(circ$Return.Date), format='%m/%d/%y'))
filter
circ[circ$Loan.Date==""]<-NA
na.omit(circ)
return=sort(as.POSIXlt(paste(circ$Return.Date), format='%m/%d/%y'))
filter(circ, circ$Return.Date!='')
circ['loan days']<-loan
circ['return days']<-return
View(dat)
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
# Getting all loan durations
for (i in 1:dim(circ[1]) {
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
# Getting all loan durations
for (i in 1:dim(circ[1]) {
# Storing durations of loans in vector
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
for (i in 1:dim(circ[1])) {
r = paste(circ[i, 2], circ[ii, 3])
r = as.POSIXlt(out, format = "%m/%d/%y %H:%M:%S", tz = "EST")
l = as.character(circ[i, 4])
if (nchar(l) > 0) {
l = as.POSIXlt(back, format = "%m/%d/%y", tz = "EST")
dif = l - r
if (dif < 0) dif = -1
} else {
dif = -1
}
dur[i] = as.numeric(dif)
}
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
for (i in 1:dim(circ[1])) {
r = paste(circ[i, 2], circ[ii, 3])
r = as.POSIXlt(r, format = "%m/%d/%y %H:%M:%S", tz = "EST")
l = as.character(circ[i, 4])
if (nchar(l) > 0) {
l = as.POSIXlt(l, format = "%m/%d/%y", tz = "EST")
dif = l - r
if (dif < 0) dif = -1
} else {
dif = -1
}
dur[i] = as.numeric(dif)
}
dif
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
for (i in 1:dim(circ[1])) {
r = paste(circ[i, 2], circ[i, 3])
r = as.POSIXlt(r, format = "%m/%d/%y %H:%M:%S", tz = "EST")
l = as.character(circ[i, 4])
if (nchar(l) > 0) {
l = as.POSIXlt(l, format = "%m/%d/%y", tz = "EST")
dif = l - r
if (dif < 0) dif = -1
} else {
dif = -1
}
dur[i] = as.numeric(dif)
}
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
for (i in 1:dim(circ[1])) {
r = paste(circ[i, 2], circ[i, 3])
r = as.POSIXlt(r, format = "%m/%d/%y %H:%M:%S", tz = "EST")
l = as.character(circ[i, 4])
if (nchar(l) > 0) {
l = as.POSIXlt(l, format = "%m/%d/%y", tz = "EST")
dif = l - r
if (dif < 0) dif = -1
} else {
dif = -1
}
dur[i] = as.numeric(dif)
}
dif
summary(circ)
data = circ[,c(2:12, 14)]
circ=read.csv('20200225_print-circulation_sample.csv')
circ=data.frame(circ)
head(circ)
circ=read.csv('20200225_print-circulation_sample.csv')
circ=data.frame(circ)
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y %H:%M:%S'))
end=length(loan)
loan[end]-loan[1]
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
for (i in 1:dim(circ[1])) {
r = paste(circ[i, 2], circ[i, 3])
r = as.POSIXlt(r, format = "%m/%d/%y %H:%M:%S", tz = "EST")
l = as.character(circ[i, 4])
if (nchar(l) > 0) {
l = as.POSIXlt(l, format = "%m/%d/%y", tz = "EST")
dif = l - r
if (dif < 0) dif = -1
} else {
dif = -1
}
dur[i] = as.numeric(dif)
}
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
circ=read.csv('20200225_print-circulation_sample.csv')
circ=data.frame(circ)
summary(circ)
data = circ[,c(2:12, 14)]
dim(circ)
loan=sort(as.POSIXlt(paste(circ$Loan.Date, circ$Loan.Time), format='%m/%d/%y %H:%M:%S'))
end=length(loan)
loan[end]-loan[1]
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
for (ii in 1:dim(circ[1])) {
r = paste(circ[ii, 2], circ[ii, 3])
r = as.POSIXlt(r, format = "%m/%d/%y %H:%M:%S", tz = "EST")
l = as.character(circ[i, 4])
if (nchar(l) > 0) {
l = as.POSIXlt(l, format = "%m/%d/%y", tz = "EST")
dif = l - r
if (dif < 0) dif = -1
} else {
dif = -1
}
dur[ii] = as.numeric(dif)
}
circ=read.csv("20200225_print-circulation_sample.csv")
circ=data.frame(circ)
summary(circ)
data = circ[,c(2:12, 14)]
dim(circ)
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
for (ii in 1:dim(circ[1])) {
r = paste(circ[ii, 2], circ[ii, 3])
r = as.POSIXlt(r, format = "%m/%d/%y %H:%M:%S", tz = "EST")
l = as.character(circ[i, 4])
if (nchar(l) > 0) {
l = as.POSIXlt(l, format = "%m/%d/%y", tz = "EST")
dif = l - r
if (dif < 0) dif = -1
} else {
dif = -1
}
dur[ii] = as.numeric(dif)
}
# Storing durations of loans in vector
dur = vector(mode = "numeric", length = dim(circ)[1])
for (ii in 1:dim(circ[1])) {
r = paste(circ[ii, 2], circ[ii, 3])
r = as.POSIXlt(r, format = "%m/%d/%y %H:%M:%S", tz = "EST")
