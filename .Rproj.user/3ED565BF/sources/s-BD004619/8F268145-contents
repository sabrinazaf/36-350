---
title: "Homework: Week 8"
author: "36-350 -- Statistical Computing"
date: "Week 8 -- Spring 2020"
output:
  pdf_document:
    toc: no
  html_document:
    toc: true
    toc_float: true
    theme: spacelab
---

Name: Sabrina Zafar

Andrew ID: sabrinaz

This homework is to be begun in class, but may be finished outside of class at any time prior to **Thursday**, March 5<sup>th</sup> at 6:00 PM. You must submit **your own** lab as a knitted PDF file on Gradescope.

---

```{r wrap-hook,echo=FALSE}
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
  # this hook is used only when the linewidth option is not NULL
  if (!is.null(n <- options$linewidth)) {
    x = knitr:::split_lines(x)
    # any lines wider than n should be wrapped
    if (any(nchar(x) > n)) x = strwrap(x, width = n)
    x = paste(x, collapse = '\n')
  }
  hook_output(x, options)
})
```

*If you do not have a `GitHub` account, you should sign up for one before proceeding.*

---

*If you have not installed and configured `Git`, you should do that before proceeding.*

---

## Question 1
*(10 points)*

*Notes 8A (4-6)*

Show us that you have a `GitHub` account. Create a repository on `GitHub` called "36-350". (Utilize the checklist in `Notes_8A`.) Then edit the code below so that we see the contents of `README.md`. To get the correct URL, do the following: go to your `GitHub` repo, click on `36-350` and then again on `README.md`, and click on the "Raw" button. Copy and paste the URL to the raw `README.md` file into the call to `readLines()` below.
```{r linewidth=80}
readLines('https://raw.githubusercontent.com/sabrinazaf/36-350/master/README.md')
```

## Question 2
*(10 points)*

*Notes 8A (5,7-8)*

Show us that you have `Git` installed on your computer. Utilize the checklist in `Notes_8A` to create a new project within `RStudio` that is tied to your "36-350" repo on `GitHub`. Then follow the listed steps in `Notes_8A` to create a new `R Script` (and *not* an `R Markdown` file) in which you put `print("It was a dark and stormy night.")`. Save this file (call it `dark_and_stormy.R`) to your local "36-350" repo. Stage the file, commit the file (and add a commit message), and push the file to `GitHub`. (If when you try to commit you see an error referring to an `index.lock` file, try to commit again...I've seen such an error when trying to commit files on my machine and it appears to be a random occurrence.) Follow the steps that you followed in Q1 to find the URL to the raw file for `dark_and_stormy.R` and copy and paste that URL below in the call to `source_url()`. If everything works, "It was a dark and stormy night." should appear, along with a hash code that you can safely ignore.
```{r linewidth=80, message=FALSE, warning=FALSE}
if ( require("devtools") == FALSE ) {
  install.packages("devtools",repos="https://cloud.r-project.org")
  library(devtools)
}
source_url('https://raw.githubusercontent.com/sabrinazaf/36-350/master/dark_and_stormy.R')
```

## Question 3
*(10 points)*

*Notes 8A (8-9)*

Following the instructions in `Notes_8A`, create a new branch both on `GitHub` and in your local project. Call it `new_branch`. Once you have done this, alter `dark_and_stormy.R` so that it prints "It was a dark and stormy night; the rain fell in torrents." Stage, commit, and push as you would have done in Q2. Source the `master` branch file as you did in Q2, and also source the `new_branch` file. If the output of the first does not include "the rain fell in torrents," while the output of the second one does include that phrase, you're good.
```{r linewidth=80}
source_url('https://raw.githubusercontent.com/sabrinazaf/36-350/master/dark_and_stormy.R')
source_url("https://raw.githubusercontent.com/sabrinazaf/36-350/new_branch/dark_and_stormy.R")
```

## Question 4
*(10 points)*

*Not in Notes 8A*

Another way to create a code branch is to "fork" a repository. Two words that you will hear when working with `GitHub` repos are "fork" and "clone." The former refers to creating a new version of a remote repo in your own account and then building upon it, with little or no intention to try to merge your changes back to the remote repo. For instance, perhaps someone created a code in 2016 that they are done with, but you want to use it and edit it. Fork the repo the code is in, and play with your copy in perpetuity. On the other hand, if you goal is to edit a master code base as part of collaborative development, you would want to clone a repo, make changes, and submit a so-called "pull request" to the owner of the master code base. (This is a request for that owner to "pull" your changes into the code that he or she is hosting.)

In this exercise, you are going to fork the `36-350-Fork` repository in my (i.e., `pefreeman`'s) account. Point your browser to `https://github.com/pefreeman/36-350-Fork` and click on the `Fork` button at top right. When/if you are prompted as to where you want the forked repository to go, indicate that you want it to go to *your* `GitHub` account. Once you've done that, source via `source_url()` the `check_mark.R` file in the repo. The path to the file should include *your account name*, and not mine!

```{r linewidth=80}
source_url("https://raw.githubusercontent.com/sabrinazaf/36-350-Fork/master/check_mark.R")
```
---

Note that at this point, you will have a forked `36-350-Fork` repo, as well as a `36-350` repo that has two branches. Leave the repo and branches alone, so that you can always generate the output you need to answer Q3 and Q4. However, *after you have turned in your homework*, you can do the following on `GitHub` if you choose to (however, see #3):

1. Regarding the branches: from either the `master` or `new_branch` branch, you can click on the button "Compare & pull request". On a new page, you should see the words "Able to merge. These branches can be automatically merged." This is because the comparison shows that all one has to do to merge the files is add a clause. If the differences were more complex (because, e.g., you deleted "It was a dark and stormy night" and tried to merge something else, like "Hello world; the rain fell in torrents."), `GitHub` would not be certain how to proceed and would ask you how to do so.
2. Regarding the branches: click on "Create pull request." After this is done, you will find yourself in a state where `GitHub` says you can safely delete the new branch.
3. Regarding the branches: unfortunately, deleting the new branch in `RStudio` is a bit more complex, involving having to go into the `RStudio` terminal and type command-line `Git` commands. Avoiding this is another reason just to leave the branches alone.
4. Regarding the fork: you can delete `36-350-Fork`. On `GitHub`, this involves going to "Settings," scrolling down to the "Danger Zone" (no lie, that's what it is called), and clicking on "Delete this repository."

As far as your `36-350` repo is concerned: I would suggest that you leave the branches alone, and when the course is completely done (and not before, because we might revisit this repo in the future), just delete the `36-350` repo from both your computer and from `GitHub`. (If you want to. Having them sitting around does not hurt anyone...it just depends on whether you care that there are extraneous repositories in your `GitHub` account.) On `GitHub`, follow the instructions given in point (4) above. On your computer, it is as simple as removing the directory with the repo (i.e., the `36-350` directory and all its sub-directories).

---

In the following questions, utilize this base code by copying and pasting it into your code chunks, then adding material. (`error=TRUE` will cause `R Markdown` to keep knitting even if you throw an exception.)
```{r,error=TRUE}
f = function(x) { 
  toupper(x) 
}
```

---

## Question 5
*(5 points)*

*Notes 8B (2)*

Add an appropriate warning, but don't change what is returned. Call the function is such a way that the warning message is observed. Was the final output from the function what you expected it to be?
```{r error=TRUE,linewidth=80}
f = function(x) { 
  if ( typeof(x) != "character") warning("x should be a character")
  toupper(x) 
}
print(f(8))
```
```
Yes, because although there was a warning, the function will just return the output considering you cannot make 8 uppercase. 
```

## Question 6
*(5 points)*

*Notes 8B (2)*

Change the warning in Q5 to an error. Call the function is such a way that the error message is observed.
```{r error=TRUE,linewidth=80}
f = function(x) { 
  if ( typeof(x) != "character") stop("x should be a character")
  toupper(x) 
}
print(f(8))
```

## Question 7
*(5 points)*

*Notes 8B (2)*

Keep your code from Q6, but add a message at the beginning saying what the function is supposed to do when called properly. Run the function two times, once with improper input, and a second time with proper input (e.g., "a") but in conjunction with `suppressMessages()`, so the message is not observed.
```{r error=TRUE,linewidth=80}
f = function(x) { 
  message("this fuction converts lower case letters to upper case letters") 
  if ( typeof(x) != "character") stop("x should be a character")
  toupper(x) 
}
print(f(8))
suppressMessages(f('a'))
```

---

In the following questions, utilize this base code by copying and pasting it into your code chunks, then adding material.
```{r error=TRUE,linewidth=80}
f = function(x) { 
  log(x)
  print("hello")
}
```

---

## Question 8
*(5 points)*

*Notes 8B (7)*

In the code chunk below, first run the code as it is defined above with a character input. Confirm that an error is generated and that you don't see the word "hello". Then, below that function call, redefine the function `f()` so that it includes a call to `try()` at an appropriate place. Then call your updated function with a character input. If you do not see the word "hello" printed, something has gone wrong.
```{r error=TRUE,linewidth=80}
f = function(x) { 
  log(x)
  print("hello")
}
f('a')
f = function(x) { 
  try(
    {
      log(x)
  
  }, silent=TRUE)
  print("hello")
}
f('a')
```

## Question 9
*(5 points)*

*Notes 8B (8-9)*

Alter your function in Q8, replacing the `try()` with `tryCatch()` (and deleting the `print("hello")`). Catch what you feel are the relevant conditions here, and deal with them appropriately (by informing the user what went wrong). (For instance...do you think `log()` issues informative messages? Or not?) Call the function with a character, call it again with a negative number, and call it one last time with 0 as input.
```{r error=TRUE,linewidth=80}
f = function(x) { 
  tryCatch( log(x), 
            error=function(c) "Error:output is not a number",
            warning=function(c) "Warning: input is non-positive"
          
  )
  
}
f('a')
f(-5)
f(0)
```

## Question 10
*(5 points)*

*Notes 8B (8-9)*

Repeat Q9, but add a `finally` argument to `tryCatch()` that prints (or more elegantly, if you want, cats) the value of $x$. Repeat the testing calls made in Q9.

```{r error=TRUE,linewidth=80}
f = function(x) { 
  tryCatch( log(x), 
            error=function(c) "Error:output is not a number",
            warning=function(c) "Warning: input is non-positive",
            finally=str(x)
        
  )
  
}
f('a')
f(-5)
f(0)
```

## Question 11
*(15 points)*

*Notes 8C (4-7)*

You are given the following code that is meant to convert one single-character string into a numeric value: "a" maps to 0, "b" maps to 0.693, etc. In theory, it should work with upper- and lower-case letters, and should throw an exception if non-character input is provided, and should throw an exception if more than one string is input, and should issue a warning and only use the first character if the number of characters in the string is greater than 1.
```{r linewidth=80}
f = function(letter) {
  return(log(which(letters==letter)))
}
```
(Yeah, whoever gave this to you is a bit lazy.) As a dutiful member of the team, your first responsibility is to write a series of tests utilizing functions in the `testthat` that will determine whether or not this code is operating correctly, given the stated expectation of how it is to perform. Below, write at least five different test function calls, at least two of which should fail. (Don't use any one `testthat` function, like `expect_equal()`, more than twice.) They can include tests that you know will fail, based on some future expectation: for instance, you can test whether a certain input leads to a thrown exception (that test would fail currently). (Or whether that same input yields an error.) Then, when you improve the code in Q12, you can improve it in such a way that your now-known-to-fail test will pass the next time.
```{r error=TRUE,linewidth=80}
if ( require("testthat") == FALSE ) {
  install.packages("testthat",repos="https://cloud.r-project.org")
  library(testthat)
}
test_that(desc='Test that the number of characters in string is greater than 1',expect_error(f("aa")))
test_that(desc='Test that a non-character input is provided', expect_error(f('*')))
#test_that(desc='Test that upper and lower case letters' expect_output(f('A'),)
test_that(desc='Test that 
```

## Question 12
*(15 points)*

*Notes 8C (4-7)*

Rewrite `f()` below in such a way that all your tests of Q11 pass. (And demonstrate that your tests pass!)
```{r linewidth=80}
f = function(letter) {
  to_lower(letter)
  if ( typeof(character) != "character" ) stop("The input must be a character.")
  return(log(which(letters==letter)))
}
test_that(desc='Test that the number of characters in string is greater than 1',expect_error(f("aa")))
test_that(desc='Test that a non-character input is provided', expect_error(f('*')))
```